services:
  # --- Backend API Service ---
  backend:
    image: ${BACKEND_IMAGE_NAME}
    container_name: ${BACKEND_CONTAINER_NAME}
    ports:
      - "${BACKEND_HOST_PORT}:8080"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      ML_API_URL: http://${ML_API_SERVICE_NAME:-ml_api}:${ML_API_INTERNAL_PORT:-8000}/evaluate
      NODE_ENV: ${NODE_ENV:-production}
    depends_on:
      db:
        condition: service_healthy
      ml_api:
        condition: service_started
    networks:
      - ${NETWORK_NAME}
    restart: ${RESTART_POLICY:-unless-stopped}

  ml_api:
    image: ${ML_API_IMAGE_NAME}
    container_name: ${ML_API_CONTAINER_NAME}
    environment:
      PYTHONUNBUFFERED: 1 
    networks:
      - ${NETWORK_NAME}
    restart: ${RESTART_POLICY:-unless-stopped}

  frontend:
    image: ${FRONTEND_IMAGE_NAME}
    container_name: ${FRONTEND_CONTAINER_NAME}
    ports:
      - "${FRONTEND_HOST_PORT}:80"
    depends_on:
      - backend
    networks:
      - ${NETWORK_NAME}
    restart: ${RESTART_POLICY:-unless-stopped}


  db:
    image: ${DB_IMAGE_NAME}
    container_name: ${DB_CONTAINER_NAME}
    ports:
      - "${DB_HOST_PORT}:5432"
    volumes:
      - fauxpas_postgres_data_prod:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"] 
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fauxpas_prod_network
    restart: ${RESTART_POLICY:-unless-stopped}

networks:
  fauxpas_prod_network:
    driver: bridge
    name: ${NETWORK_NAME:-fauxpas_prod_network}



volumes:
  fauxpas_postgres_data_prod:
    name: ${DB_VOLUME_NAME:-fauxpas_fauxpas_postgres_data_prod}