version: '3.8'

services:
  # --- Backend API Service ---
  backend:
    image: ghcr.io/unhappybee/faux_pas_test/fauxpas-backend:latest 
    container_name: fauxpas_backend_prod
    ports:
      - "8080:8080" 
    environment:
      DATABASE_URL: ${DATABASE_URL} 
      ML_API_URL: http://ml_api:8000/evaluate 
      NODE_ENV: production 
    depends_on:
      db:
        condition: service_healthy 
      ml_api:
        condition: service_started 
    networks:
      - fauxpas_network
    restart: unless-stopped 

  ml_api:
    image: ghcr.io/unhappybee/faux_pas_test/fauxpas-ml-api:latest 
    container_name: fauxpas_ml_api_prod
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      - fauxpas_network
    restart: unless-stopped

  frontend:
    image: ghcr.io/unhappybee/faux_pas_test/fauxpas-frontend:latest 
    container_name: fauxpas_frontend_prod
    ports:
      - "80:80" 
    depends_on:
      - backend 
    networks:
      - fauxpas_network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: fauxpas_db_prod
    ports:
      - "5432:5432" 
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data 
    environment:
      POSTGRES_USER: ${POSTGRES_USER} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      POSTGRES_DB: ${POSTGRES_DB} 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"] 
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fauxpas_network
    restart: unless-stopped

networks:
  fauxpas_network:
    driver: bridge

volumes:
  postgres_data_prod: 